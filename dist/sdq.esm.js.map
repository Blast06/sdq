{"version":3,"file":"sdq.esm.js","sources":["../src/validators/is-cedula.js","../src/validators/is-rnc.js","../src/validators/exception-cedula-list.js","../src/sdq.js"],"sourcesContent":["'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nimport luhn from 'luhn-alg'\nimport exceptions from './exception-cedula-list'\n\n/**\n * Module export.\n * @public\n */\n\nexport default isCedula\n\n/**\n * Validate a given input to be a valid cÃ©dula de identidad electoral.\n * @param {String} input The input to validate.\n */\n\nfunction isCedula(input) {\n  // The input must be a string.\n  if (typeof input !== 'string') {\n    return false\n  }\n\n  // Remove any character but digits.\n  input = input.replace(/[^\\d]/g, '')\n\n  // The input must contains 11 digits.\n  if (input.length !== 11) {\n    return false\n  }\n\n  // If the input is a match of one in the exception list, then it is valid.\n  if (exceptions.indexOf(input) > -1) {\n    return true\n  }\n\n  return luhn(input)\n}\n","'use strict'\n\n/**\n * Module export.\n * @public\n */\n\nexport default isRnc\n\n/**\n * Validate a given input to be a valid RNC.\n * @param {String} input The input to validate.\n */\n\nfunction isRnc(input) {\n  // The input must be a string.\n  if (typeof input !== 'string') {\n    return false\n  }\n\n  // Remove any character but digits.\n  input = input.replace(/[^\\d]/g, '')\n\n  // The input must contains 9 digits.\n  if (input.length !== 9) {\n    return false\n  }\n\n  return customLuhn(input)\n}\n\n/**\n * Verify that a given input adheres to a custom luhn formula.\n * @param {String} input The input to check.\n */\n\nfunction customLuhn(input) {\n  // Convert string input into array of integers.\n  input = input.split('').map(c => parseInt(c, 10))\n\n  // While a luhn formula require for each second digits to be doubled,\n  // this custom formula use different factors for each digits.\n  const factors = [7, 9, 8, 6, 5, 4, 3, 2]\n\n  // Sum the product of all digits by its factor.\n  let sum = 0\n\n  for (let i = factors.length - 1; i >= 0; i -= 1) {\n    sum = sum + factors[i] * input[i]\n  }\n\n  const remaining = sum % 11\n  let digit\n\n  if (remaining === 0) {\n    digit = 2\n  } else if (remaining === 1) {\n    digit = 1\n  } else {\n    digit = 11 - remaining\n  }\n\n  // Validar el resultado con el digito validador,\n  // que en caso del RNC es el ultimo digito.\n  return digit === input.pop()\n}\n","export default [\n  '00000000018',\n  '11111111123',\n  '00100759932',\n  '00105606543',\n  '00114272360',\n  '00200123640',\n  '00200409772',\n  '00800106971',\n  '01200004166',\n  '01400074875',\n  '01400000282',\n  '03103749672',\n  '03200066940',\n  '03800032522',\n  '03900192284',\n  '04900026260',\n  '05900072869',\n  '07700009346',\n  '00114532330',\n  '03121982479',\n  '40200700675',\n  '40200639953',\n  '00121581750',\n  '00119161853',\n  '22321581834',\n  '00121581800',\n  '09421581768',\n  '22721581818',\n  '90001200901',\n  '00301200901',\n  '40200452735',\n  '40200401324',\n  '10621581792'\n]\n","'use strict'\n\n/**\n * Module dependencies\n * @private\n */\n\nimport isCedula from './validators/is-cedula'\nimport isRnc from './validators/is-rnc'\n\n/**\n * SDQ object.\n */\n\nconst SDQ = {\n  isCedula,\n  isRnc\n}\n\n/**\n * Module export.\n * @public\n */\n\nexport default SDQ\n"],"names":["isCedula","input","replace","length","exceptions","indexOf","luhn","isRnc","customLuhn","split","map","parseInt","c","factors","sum","i","remaining","pop","SDQ"],"mappings":"AAsBA,SAASA,WAASC,SAEK,iBAAVA,IAQU,QAHbA,EAAMC,QAAQ,SAAU,KAGtBC,SAKNC,WAAWC,QAAQJ,IAAU,GAI1BK,KAAKL,KC3Bd,SAASM,QAAMN,SAEQ,iBAAVA,IAQU,OAHbA,EAAMC,QAAQ,SAAU,KAGtBC,QAIHK,WAAWP,IAQpB,SAASO,WAAWP,KAEVA,EAAMQ,MAAM,IAAIC,IAAI,mBAAKC,SAASC,EAAG,UASxC,IALCC,GAAW,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAGlCC,EAAM,EAEDC,EAAIF,EAAQV,OAAS,EAAGY,GAAK,EAAGA,GAAK,KAChCF,EAAQE,GAAKd,EAAMc,OAG3BC,EAAYF,EAAM,UAGN,IAAdE,EACM,EACe,IAAdA,EACD,EAEA,GAAKA,KAKEf,EAAMgB,iCChEzB,gBACE,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,eCnBIC"}